// clang-format off
// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AI33DETCOUNTIMGS_H_
#define FLATBUFFERS_GENERATED_AI33DETCOUNTIMGS_H_

#include "flatbuffers/flatbuffers.h"

struct AccumulatedImage;

struct AccumulatedImage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FIRST_PULSE_TIME = 4,
    VT_PULSE_TIME = 6,
    VT_DETECTOR_ID = 8,
    VT_DETECTION_COUNT = 10
  };
  uint64_t first_pulse_time() const {
    return GetField<uint64_t>(VT_FIRST_PULSE_TIME, 0);
  }
  uint64_t pulse_time() const {
    return GetField<uint64_t>(VT_PULSE_TIME, 0);
  }
  const flatbuffers::Vector<uint32_t> *detector_id() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_DETECTOR_ID);
  }
  const flatbuffers::Vector<uint32_t> *detection_count() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_DETECTION_COUNT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_FIRST_PULSE_TIME) &&
           VerifyField<uint64_t>(verifier, VT_PULSE_TIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DETECTOR_ID) &&
           verifier.Verify(detector_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DETECTION_COUNT) &&
           verifier.Verify(detection_count()) &&
           verifier.EndTable();
  }
};

struct AccumulatedImageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_first_pulse_time(uint64_t first_pulse_time) {
    fbb_.AddElement<uint64_t>(AccumulatedImage::VT_FIRST_PULSE_TIME, first_pulse_time, 0);
  }
  void add_pulse_time(uint64_t pulse_time) {
    fbb_.AddElement<uint64_t>(AccumulatedImage::VT_PULSE_TIME, pulse_time, 0);
  }
  void add_detector_id(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> detector_id) {
    fbb_.AddOffset(AccumulatedImage::VT_DETECTOR_ID, detector_id);
  }
  void add_detection_count(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> detection_count) {
    fbb_.AddOffset(AccumulatedImage::VT_DETECTION_COUNT, detection_count);
  }
  AccumulatedImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AccumulatedImageBuilder &operator=(const AccumulatedImageBuilder &);
  flatbuffers::Offset<AccumulatedImage> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<AccumulatedImage>(end);
    return o;
  }
};

inline flatbuffers::Offset<AccumulatedImage> CreateAccumulatedImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t first_pulse_time = 0,
    uint64_t pulse_time = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> detector_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> detection_count = 0) {
  AccumulatedImageBuilder builder_(_fbb);
  builder_.add_pulse_time(pulse_time);
  builder_.add_first_pulse_time(first_pulse_time);
  builder_.add_detection_count(detection_count);
  builder_.add_detector_id(detector_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<AccumulatedImage> CreateAccumulatedImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t first_pulse_time = 0,
    uint64_t pulse_time = 0,
    const std::vector<uint32_t> *detector_id = nullptr,
    const std::vector<uint32_t> *detection_count = nullptr) {
  return CreateAccumulatedImage(
      _fbb,
      first_pulse_time,
      pulse_time,
      detector_id ? _fbb.CreateVector<uint32_t>(*detector_id) : 0,
      detection_count ? _fbb.CreateVector<uint32_t>(*detection_count) : 0);
}

inline const AccumulatedImage *GetAccumulatedImage(const void *buf) {
  return flatbuffers::GetRoot<AccumulatedImage>(buf);
}

inline const char *AccumulatedImageIdentifier() {
  return "ai33";
}

inline bool AccumulatedImageBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, AccumulatedImageIdentifier());
}

inline bool VerifyAccumulatedImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AccumulatedImage>(AccumulatedImageIdentifier());
}

inline void FinishAccumulatedImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<AccumulatedImage> root) {
  fbb.Finish(root, AccumulatedImageIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_AI33DETCOUNTIMGS_H_
// clang-format on
